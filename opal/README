Opal is a Java based asset allocation and consumption planning calculator.

The name Opal came from Optimal Portfolio ALgorithm.

Opal is research software, and is not production quality.

Opal performs hill climbing searches to find the optimal solution when
searching the asset allocation/consumption space. This requires no
local maxima. Proof of this is not provided, but it seems likely for
reasonable scenarios. It is however known not to be strictly true in
some circumstances at age 119. Violation of this condition requires
there be a direction in which you can traverse in which utility first
decreases then as you proceed further increases.

Obtaining additional required components
----------------------------------------

# Java, R, and Gnuplot:
sudo apt install default-jre-headless default-jdk r-base gnuplot-nox

# If doing developement you might want to enable the desktop display of graphs:
sudo apt-get install gnuplot-qt

# Obtaining the Java commons Math 3 library.
cd aacalc/opal
# In a web browser visit http://commons.apache.org/proper/commons-math/download_math.cgi and download commons-math3 tar.gz binary library.
tar -zxf <path-to>/commons-math3-3.6.1-bin.tar.gz
mkdir classes
mv commons-math3-3.6.1/commons-math3-3.6.1.jar classes
rm -r commons-math3-3.6.1/

# If aacalc/opal/data hasn't been created (from setting up web component),
# obtain the asset class returns, interest rate, and mortality data files:
cd aacalc/opal
curl http://www.gordoni.com/aacalc-data.tar.gz | tar -zxf -

Setting up Systematic Investor Toolbox and R packages for performing MVO
------------------------------------------------------------------------

# Mean variance optimization reduces 3 or more asset classes down to a
# single dimension to be searched.
# This step is only needed if plan to specify ef='mvo' when running Opal.
# Normally this will not be the case.
# This is needed to give decent performance with 4 or more asset classes.

# Notes cribbed from: http://www.r-bloggers.com/introduction-to-asset-allocation/

sudo apt install r-base r-cran-quadprog r-cran-lpsolve

# Either:
sudo R # to install in /usr/local
# or
R # to install in ~/R

install.packages('quantmod')
install.packages('corpcor')
install.packages('kernlab')
q()
# answer 'n' to save image

# Using a web browser download: https://github.com/systematicinvestor/SIT/raw/master/sit.gz
cp <path-to-download>/sit.gz aacalc/opal/

Building Opal
-------------

cd aacalc/opal
mkdir bin
javac -d bin -cp 'classes/*' src/com/gordoni/opal/*.java
jar cf classes/opal.jar -C bin .

Running Opal
------------

export OPAL_HOME=$HOME/aacalc/opal
java -ea -cp $OPAL_HOME/classes/'*' com.gordoni.opal.OPAL <option> ...

Example:
    java -ea -cp $OPAL_HOME/classes/'*' com.gordoni.opal.OPAL -e start_tp=100000 -e defined_benefit=10000 -e ret_resample=None -e "validate_draw='bootstrap'" -e ret_bootstrap_block_size=1

Ignore the warnings:
    Data file not found (might not be needed): sbbi.csv
    Data file not found (might not be needed): eafe.csv
    Data file not found (might not be needed): incomesolutions.com
These files are not contained in the aacalc-data.tar.gz file.

options:
  -e var=value
    Set variable var to value val.
    It is important to get quoting correct.
    E.g. to add small cap value asset class: -e "asset_classes=('stocks', 'bonds', 'sh')"
    See aacalc/opal/src/com/gordoni/opal/Config.java for a list of variables and possible values.
    Note, not all combinations are valid, and the responsibility for sanity checking relies on the user.
 -c config_filename
    Read var=value lines from config_file, default opal-scenario.txt in current directory.
    1 per line. # for comments.
    Only 1 config file is alowed, and it will be processed ahead of any -e options.

var=value examples:
    aa_strategy='age_in_bonds' vw_strategy='retirement_amount' vw_percentage=0.04 -e defined_benefit=10000 -e floor=20000
                             - Monte Carlo simulation with $10k Social Security and failure consuming less than $20k

    sex='male'
    sex2='female'            - simulate couple
    start_age=25             - start age for map generation and by default subsequent Monte Carlo simulation
    start_age2=25
    retirement_age=65        - retirement age relative to first person
    birth_year=1990          - birth year of first person; default is the current_year minus start_age

    start_tp=100000          - start with $100k
    accumulation_rate=1000   - annual contribution $500
    accumulation_ramp=1.07   - contributions growing by 7% per year

    floor=20000              - floor consumption level for time weighted and non-time weighted metrics and pre-retirement if not utility_retire

    asset_classes=('tips', 'sh') safe_aa='tips' fail_aa='sh' generate_start_year=1972 generate_end_year=2013 validate_start_year=1972 validate_end_year=2013
                             - TIPS and small cap value 1972-2013.

    ef='mvo' search='hill'   - Perform MVO to reduce asset classes.

    management_expense=0.001 - Apply 0.1% management expenses to all asset classes.

    num_sequences_validate=100000 - 100k Monte Carlo simulations.
    validate_age=25          - start age for Monte Carlo simulation; default is start_age; also want to set birth_year if fixed validate_age and moving start_age

    consume_discount_rate=0.03 upside_discount_rate=0.03
                             - 3% discounting of the future

    utility_eta=3.0          - CRRA utility with gamma of 3.0
    utility_join=True utility_eta=3.0 utility_eta_2=1.0 utility_join_required=30000 utility_join_desired=10000 utility_join_slope_ratio=0.1
                             - floor and upside utility function
    defined_benefit=20000    - $20k defined benefits per year

    utility_retire=True      - only report performance metrics post retirement
                               PROBABLY DON'T WANT TO ALTER THIS FLAG
                               without this flag, and without floor or public assistance,
                               zero consumption prior to retirement creates negative infinities which result in zero metrics

    prefix='../test/opal'    - output results to files ../test/opal-*; ../test directory must already exist
                               ABSOLUTE PATHS ARE NOT SUPPORTED

    skip_*                   - skip various stages of the program, see Config.java

    trace=True               - be verbose about progress

Output
------

Opal displays the input parameters, recommended investment and
consumption action for the starting age, and Monte Carlo simulation
performance metrics. The key metric is "combined", which is the
default optimization goal.
    tw - time weighted time consumption is above floor level
    ntw - probability of consumption always being above floor level
    consume - inverse of time weighted discounted expected utility
    inherit - value of any inheritance
    combined - consume plus inherit
    tax - value of taxes paid

Opal produces a number of opal-*.csv output files. The best way to get
a handle on them is to view the corresponding .png files using the
Gnome "eog" viewer, ImageMagick "display" viewer, or some other
command.

opal-linear.csv contains the asset allocation and consumption heat
maps.

Known issues
------------

tw/ntw metrics haven't been used in a long tim, and may not be
correct.

Validation (see below) occassionally fails resulting in metrics of
zero because we consume to much in a terminal year. This is a result
of using interpolation to decide how much to consume, and has so far
proven difficult to fix, especially in the presence of leverage. One
additional approach might be to reduce the portfolio size slightly
during generation, but not validation.

Ubuntu 16.04 - Heatmap plots are messed up. This is a result of
gnuplot bug #1767. Ubuntu ships with gnuplot 5.0 patchlevel 3. This
bug is fixed in patchlevel 4.

Development
-----------

AACalc has a long history. First as a Monte Carlo PHP script, then as
a SDP Python script for cleanliness, then as a Java program for
performance. Some of the design decisions can be traced back to this
history. E.g. most Java variables are in underscore lower case rather
than camel case, an unusual indentation style, and increasing
portfolio sizes being represented by decreasing bucket values.

A lot of the complexity of AACalc is the result of it supporting a
large number of experimental options which were added as it evolved.

A different way of implementing and structuring AACalc would be to use
a generic SDP package, rather than the ad hoc asset allocation only
approach taken. Since this hasn't been done, it isn't known whether
this would offer any advantages or disadvantages.

Key files:
    AAMap.java - SDP/Monte Carlo main loop
    Config.java - list of configuration values
    HistReturns.java - loads all data files
    Returns.java - adjusts returns and generates bootstrap/synthetic sequences
    Scenario.java - oversees running of SDP and Monte Carlo simulation and results ouput

Validation. SDP produces the optimal strategy for timewise independent
returns, therefore the metric produced during generation should match
the metric during Monte Carlo simulation.

So doing:

    -e ret_resample=None -e "validate_draw='bootstrap'" -e ret_bootstrap_block_size=1 -e map_headroom=None

then the generated metric should match the combined simulation metric,
to the limit of the finite num_sequences_validate sample size.

If you get all zeros as the result, you may need to play with
map_headroom, setting to to a value so that a small amount of wealth
is left for terminal ages, but not so much that the results are
appreciably altered.

When doing this you need to ensure there are no taxes because only an
approximate solution is generated in the presence of taxes.

You might also need to increase map_max_factor to improve the accuracy
of the calculations for large portfolio sizes.
