AIPlanner API documentation
***************************

April 3, 2021.

This document describes the AIPlanner - Deep Reinforcement Learning
Financial Planner web based application programming interface.

Invocation
==========

Requests are made and results returned as JSON data via the HTTPS PUT
method to the api server. E.g.,

    curl -d '[{"age": 50, "age_retirement": 67, "p_tax_deferred": 1000000, "rra": [3]}]' \
        http://<apiserver_host>:<port>/api/infer

which results in something like:

    {
        "error": null,
        "result": [{
             "cid": null,
             "results": [{
                 "error": null,
                 "cid": null,
                 "aid": "e_j3yewn",
                 "rra": 3,
                 "consume": 0.0,
                 "retirement_contribution": 0.0,
                 "asset_classes": ["stocks", "real_bonds"],
                 "asset_allocation": [0.8695251175100378, 0.1304748824899622],
                 "asset_allocation_tax_free": null,
                 "asset_allocation_tax_deferred": [0.8695251175100378, 0.1304748824899622],
                 "asset_allocation_taxable": null,
                 "real_bonds_duration": 21.3,
                 "nominal_bonds_duration": null,
                 "nominal_spias_adjust": null,
                 "nominal_spias_purchase": null,
                 "real_spias_purchase": null,
                 "portfolio_wealth": 904693.3272722478,
                 "pv_preretirement_income": 0,
                 "pv_retired_income": 0,
                 "pv_spias_purchase": 0.0,
                 "pv_future_taxes": 95306.67272775219,
            }]
        }]
    }

Paths
=====

/api/infer
----------

Perform neural network inference on one or more scenarios represented
as a JSON array of JSON objects, and returns the current investment
strategy recommended by the neural network.

Inference is fast. Perhaps 100 scenario inferences can be performed
per second, with most of the time spent transforming the JSON scenario
into an internal scenario representation.

/api/evaluate
-------------

Evaluation takes a single scenario, represented as a JSON array
containing a single JSON object. It returns the current investment
strategy and the simulated performance of the investment strategy.

Evaluation is slow. Perhaps 30 seconds for a single evaluation.

/api/data
---------

Takes no parameters.

Returns various assets associated with an evaluation.

The prefered method of displaying the results of an evaluation is by
plotting or otherwise reporting the returned results, not by using
these assets. If the assets are used it should be noted that the
continued existence and look and feel of the assets isn't guaranteed
in the future.

The following assets are currently available:

    /api/data/<aid>/aiplanner.pdf
        - document describing all results

    /api/data/<aid>/consume-pdf.svg
        - plot of all consumption probability density functions

    /api/data/<aid>/rra<rra>/asset_allocation.svg
        - figure representing current recommended asset allocation

    /api/data/<aid>/rra<rra>/wealth.svg
        - figure representing current wealth

    /api/data/<aid>/rra<rra>/alive.svg
        - plot of life expectancy

    /api/data/<aid>/rra<rra>/consume-pdf.svg
        - plot of consumption density function

    /api/data/<aid>/rra<rra>/consume-cr.svg
        - plot of conumption confidence region

    /api/data/<aid>/rra<rra>/paths-consume.svg
        - plot of example consumption paths

    /api/data/<aid>/rra<rra>/paths-gi.svg
        - plot of example guaranteed income paths

    /api/data/<aid>/rra<rra>/paths-p.svg
        - plot of example investment portfolio paths

    /api/data/<aid>/rra<rra>/paths-stocks.svg
        - plot of example stock asset allocation paths

    /api/data/<aid>/rra<rra>/estate-pdf.svg
        - plot of residual estate probability density function

where <aid> and <rra> are the returned AIPlanner id and relative risk
aversion associated with the evaluation.

/api/healthcheck
----------------

Takes no parameters.

Creates a random scenario and performs inference and/or a short
running evaluation on it. Returns the string "OK" on success. Any
other value indicates an error.

Parameters
==========

Infer and evaluate take a list of scenarios as a parameter.

A scenario is represented as a JSON object containing the keys listed
below. Most keys are optional, taking on the specified default value,
unless otherwise indicated.

Customer id
-----------

cid: any valid JSON value
default: null

The customer id is not used by AIPlanner. It is returned in the
results as received as an aid to ensure the correct results are
associated with the correct individual. It should be an opaque
value. Private account numbers and customer identifying information
should not normally be transmitted to AIPlanner.

Customer name
-------------

customer_name: string
default: ""

An optional name for this customer; used in generated reports.

Scenario name
-------------

scenario_name: string
default: ""

An optional name for this scenario; used in generated reports.

Sex
---

sex: "female" or "male"
default: "female"

Sex of primary individual/self.

Secondary sex
-------------

sex2: "female", "male", or null
default: null

Sex of secondary individual/spouse. Null if none.

Age
---

age: number
required

Age of self in possibly decimal years.

Secondary age
-------------

age2: number
required if sex2 is not null.

Age of spouse. Ignored if sex2 is null.

Health
------

life_expectancy_additional: number
default: 0

Life expectancy is computed using the cohort mortality tables from
Social Security Actuarial Study No. 120. The value here represents the
additional (if positive) or reduced (if negative) life expectancy of
self in decimal years.

Financial planning clients are typically wealthier and healthier than
the general population, so a value such as 3 might be appropriate.

Note that training of the neural network and evaluation do not assume
living to any particular age. Rather the probabilities of death for
all ages up to 120 are calculated, and then the results for each
different possible age of death aggregated.

Secondary health
----------------

life_expectancy_additional2: number
default: 0

Additional life expectancy for spouse in decimal years. Ignored if
sex2 is null.

Retirement age
--------------

age_retirement: number
required

Age of self in decimal years at start of retirement. Set to a value
less than age if already retired.

Retirement is the period in which the neural network calculates the
consumption amount. Prior to retirement consumption is fully
determined by the user.

Pre-retirement income
---------------------

income_preretirement: number
default: 0

Current post FICA pre-tax income of self.

Labor income could also currently be represented as guaranteed_income.
It is broken out as a separate input to allow for the possibility of
labor income one day being modeled as volatile, reflecting possible
changes in employment status, something which guaranteed_income
doesn't support.

Secondary pre-retirement income
-------------------------------

income_preretirement2: number
default: 0

Current post FICA pre-tax income of spouse. Ignored if sex2 is null.

Pre-retirement income ending age
--------------------------------

income_preretirement_age_end: number or null
default: null

Age of self in decimal years at which pre-retirement income is first
no longer received, or null to correspond to self reaching
age_retirement.

Secondary pre-retirement income ending age
------------------------------------------

income_preretirement_age_end2: number or null

Age of spouse when their pre-retirement income ceases, or null to
correspond to self reaching age retirement, or no spouse.

Pre-retirement consumption
--------------------------

consume_preretirement: number
default: 0

Annual pre-retirement consumption.

401(k) available
----------------

have_401k: true or false
default: true

Whether self has access to a 401(k) scheme.

Secondary 401(k) available
--------------------------

have_401k2: true or false
default: true

Whether spouse has access to a 401(k) scheme.

Guaranteed income
-----------------

guaranteed_income: array of JSON objects
default: []

Guaranteed income and expenses. Ongoing, or one time, income and
expenses are described here. Each object in the array describing one
such income or expense. The fields of each object are as follows:

    type: string
    default: "income_annuity"

    Type of income or expense. This is an arbitrary field. The only
    exception currently is that a value of "social_security" receives
    special tax treatment.

    owner: "self" or "spouse"
    default: "self"

    Nominal owner of the benefit.

    start: number or null
    default: null

    Starting age of the owner for the income/expense to begin. Default
    of null starts when self (not owner) reaches age_retirement.

    end: number or null
    default: null

    Age of owner at which point the benefit is no longer paid. Default
    of null indicates the benefit goes on forever, that is until nobody
    is alive.

    A one time income or expense can be described by having end =
    start + 1.

    payout: number
    required

    Value of annual guaranteed income payout expressed in today's
    dollars. Negative for expenses.

    inflation_adjustment: "cpi" or number
    default: "cpi"

    Annual inflation increase fraction from today, or "cpi" for
    adjustments to be  based on a simulated Consumer Price Index.

    E.g. A value like 0.02 might be used with a nominal SPIA to try and
    compensate for the effects of inflation.

    joint: true or false
    default: false

    True if payout drops on death of either self or spouse, false if
    value of payout drops only on death of owner.

    payout_fraction: number
    default: 0

    Fraction of payout received when the joint contingency
    occurs. Zero specifies a single annuity with no joint contingency.

    source_of_funds: "taxable", "tax_deferred", or "tax_free"
    default "tax_deferred"
 
    Source of funds defining the tax treatment of the benefit or
    expense.

    For income, "taxable" defines an income source such as a SPIA
    purchased with regular taxable funds, "tax_deferred" describes
    their purchase with 401(k) or Traditional IRA funds, and
    "tax_free" describes their purchase with Roth 401(k) or Roth IRA
    funds.

    For "taxable" guaranteed income it is important to set the
    exclusion_period and exclusion_amount, otherwise the whole payout
    will be taxed.

    For expenses, regular expenses should be "tax_free". A tax
    deductable expense can be either "tax_deferred" or "taxable".

    exclusion_period: number
    default: 0

    For source_of_funds "taxable", the income tax exclusion period in
    years from age start.

    The exclusion_period and exclusion_amount are used to indicate
    the return of capital which is not taxable.
    
    exclusion_amount: number
    default: 0

    For source_of_funds "taxable", the annual income tax exclusion
    amount of the payout in today's dollars. Not adjusted for
    inflation.

Tax deferred portfolio size
---------------------------

p_tax_deferred: number
default: 0

Pre-tax traditional IRA, 401(k), 403(b), and 457 portfolio balance.

Tax free portfolio size
-----------------------

p_tax_free: number
default: 0

After tax Roth IRA, Roth 401(k), and Roth 403(b) portfolio balance.

Taxable stocks portfolio size
-----------------------------

p_taxable_stocks: number
default: 0

Value of taxable stock holdings.

Taxable stocks basis
--------------------

p_taxable_stocks_basis: number
default: p_taxable_stocks if specified otherwise 0

Tax cost basis of taxable stock holdings.

Taxable bonds portfolio size
----------------------------

p_taxable_bonds: number
default: 0

Value of taxable bond holdings.

Taxable bonds basis
-------------------

p_taxable_bonds_basis: number
default: p_taxable_bonds if specified otherwise 0

Tax cost basis of taxable bond holdings.

Taxable cash portfolio size
---------------------------

p_taxable_cash: number
default: 0

Value of taxable cash holdings.

Currently cash will get reallocated to stocks and bonds.

Taxable other portfolio size
----------------------------

p_taxable_other: number
default: 0

Value of taxable other holdings (REITs, commodities etc.).

Currently other holdings will get reallocated to stocks and bonds.

Taxable other basis
-------------------

p_taxable_other_basis: number
default: p_taxable_other if specified otherwise 0

Tax cost basis of taxable other holdings (REITs, commodities etc.).

Observe market conditions
-------------------------

observe_market_conditions: true or false
default: true

Whether the model is able to observe the stock price to fair price,
stocks volatility, and real short interest rate in making investment
decisions.

If true, the model is considered to be performing tactical asset
allocation and consumption planning. If false, the model is considered
to be performing strategic asset allocation and consumption planing.

Stock price to fair value
-------------------------

stocks_price: number
default: based on an assessment of current market conditions

Current price of stocks relative to fair value.

This indicator is based on the premise that sometimes stocks are
richly valued and sometimes they are cheap. It should be set to 1 if
markets followed a purely random walk over the long term.

Currently the default value is the average of the S&P 500 12 month
forward and trailing 12 month P/E ratios divided by their long term
average value.

Stocks volatility
-----------------

stocks_volatility: number
default: based on an assessment of current market conditions

Current volatility of stocks relative to long term average.

The volatility of stocks in one month is predictive of their
volatility in the following month. The same is less true 12 months
ahead. Currently AIPlanner performs rebalancing calculations on an
annual basis. As a result, this indicator currently may have less
predictive power than if rebalancing was performed more frequently.

Currently the default value is based on the value of the VIX index
divided by its long term average.

Nominal short interest rate
---------------------------

nominal_short_rate: number
default: based on the current Treasury yield curve

The annualized nominal interest rate available for short term cash.
E.g. 0.03

At most two of nominal_short_rate, real_short_rate, and inflation_rate
may be specified.

Real short interest rate
------------------------

real_short_rate: number
default: based on the current Treasury yield curve

The annualized real interest rate available for short term cash.
E.g. 0.01

Inflation short rate
--------------------

inflation_short_rate: number
default: based on the current Treasury yield curve

The annualized current inflation rate. E.g. 0.02

AIPlanner assumes the current inflation rate is equal to the break
even inflation rate. That is the inflation risk premium and the real
liquidity premium offset each other.

SPIAs permitted
---------------

spias: true or false
default: true

Whether to permit AIPlanner to recommend the purchase of Single
Premium Immediate Annuities.

SPIAs are particularly beneficial for healthy clients in their late
70's and early 80's.

Relative risk aversion
----------------------

rra: array of number
default: [1.5, 3, 6]

A list of coefficients of relative risk aversion to use for inference
or evaluation.

Each RRA value is associated with a differently trained neural
network.  As a result, currently the only values that are supported
are 1.5, 3, and 6.

Evaluation timesteps
--------------------

num_evaluate_timesteps: number
default: 100000

The number of years to simulate when performing evaluation.

This value may be reduced to get less accurate results rapidly, or
increased to get more accurate results albeit more slowly.  This value
is currently capped at 2000000.

The default value is subject to change.

Sample paths
------------

num_sample_paths: number
default: 5

The number of sample investment paths to return in the results.
Sample paths take up a considerable amount of returned data, hence by
default only a few are returned. This value is currently capped at
10000.

Results
=======

Both /api/infer and /api/evaluate return a JSON object describing the
results of the query. It has two forms:

    {"error": "<error message>"}

in the event of an error, and

    {"error": null, "result": [ <scenario_result_set>, ... ]}

representing a list of scenario result sets in the case of infer in
the same order as the original scenarios, or a list containing a
single scenario result set in the case of evaluate.

Each result set object contains "results" a list of JSON result
objects, one for each coefficient of relative risk aversion included
in the original request, in the same order as they were specified.

For /api/infer a scenario result set has the form:

    {"cid": <customer_id>, "results": [ <scenario_result>, ... ]}

For /api/evaluate a scenario result set has the form:

    {"cid": <customer_id>, "report": <report_id>, "results": [ <scenario_result>, ... ]}

<report_id> identifies a PDF report of the results. The report may be
retrieved using a HTTP GET request:

    curl http://<apiserver_host>:<port>/api/data/<report_id>

Each <scenario_result> is of the form:

    {"error": <error_message>, "cid": <cid>, "aid": <aid>}

or

    {"error": null, "<key>": <value>, ...}

Common result keys
==================

If error is null, at least the following key values will be defined by
/api/infer and /api/evaluate scenario results.

Customer id
-----------

cid: any valid JSON value

The customer id supplied with the request, or null if none.

AIPlanner id
------------

aid: string or null

The identifier assigned to this request by AIPlanner. May be useful
for debugging.

Warning messages
----------------

warnings: [ string, ... ]

A typically empty list of warning messages associated with this
result. Warning messages are used to convey the fact that the
parameters being simulated fall outside the model training range, or
other observed unusual situations. Warning messages should normally be
displayed to the end user.

Relative risk aversion
----------------------

rra: number

The coefficient of relative risk aversion associated with this result.

Current consumption target
--------------------------

consume: number

The current recommended retirement consumption amount, or
consume_preretirement if not yet retired.

Retirement plan contribution
----------------------------

retirement_contribution: number

The recommended retirement plan contribution amount.

Asset class names
-----------------

asset_classes: ["<asset_class_name>", ... ]

The names of the asset classes.

Currently always ["stocks", "real_bonds"].

Asset allocation
----------------

asset_allocation: [<number>, ... ]

The fractional allocations of the overall investment portfolio to the
asset classes in the same order as asset_classes.

Asset allocation tax free
-------------------------

asset_allocation_tax_free: [<number>, ... ] or null

The fractional allocations of the tax free investment portfolio to the
asset classes in the same order as asset_classes, or null if tax free
assets are zero after the recommended consume amount.

Asset allocation tax deferred
-----------------------------

asset_allocation_tax_deferred: [<number>, ... ] or null

The fractional allocations of the tax deferred investment portfolio to
the asset classes in the same order as asset_classes, or null if tax
deferred assets are zero after the recommended consume amount.

Asset allocation taxable
------------------------

asset_allocation_taxable: [<number>, ... ] or null

The fractional allocations of the taxable investment portfolio to the
asset classes in the same order as asset_classes, or null if taxable
assets are zero after the recommended consume amount.

Real bonds duration
-------------------

real_bonds_duration: number

The recommended duration for real bonds.

Reserved
--------

nominal_bonds_duration: null

This field is reserved for future use. Nominal bonds appear inferior
to real bonds, and thus are not currently recommended by AIPlanner.

Nominal SPIAs annual adjustment
-------------------------------

nominal_spias_adjust: number or null

The annual increase in the nominal SPIA payout intended to hopefully
offset the effects of inflation. E.g. 0.02 represents a 2% annual
increase in the nominal payout.

Nominal SPIAs purchase amount
-----------------------------

nominal_spias_purchase: number or null

The current recommended nominal SPIA purchase amount.

Reserved
--------

real_spias_purchase: null

This field is reserved for future use. Real SPIAs appear slightly
inferior to nominal SPIAs, and thus are not currently not recommended
by AIPlanner.

Total portfolio wealth
----------------------

portfolio_wealth: number

The present value of the taxable, tax deferred, and tax free
investment portfolios, less an estimate of future taxes assessed
against the taxable and tax deferred portfolios.

Pre-retirement income present value
-----------------------------------

pv_preretirement_income: number or null

The present value of any pre-retirement guaranteed income less
expenses and taxes. Null if retired.

Retirement income present value
-------------------------------

pv_retired_income: number

The present value of any post-retirement guaranteed income less
expenses and taxes.

Current SPIA purchase present value
-----------------------------------

pv_spias_purchase: number

The present value of any current SPIA purchase, less an estimate of
the future taxes associated with purchase of a SPIA using tax deferred
funds.

Future taxes present value
--------------------------

pv_future_taxes: number

The present value of future taxes.

Additional evaluation result keys
=================================

/api/evaluate includes all of the above keys, plus the following
additional keys:

Certainty equivalent consumption
--------------------------------

ce: number

The certainty equivalent consumption in retirement of the strategy
computed with the given RRA coefficient.

Like all consumption measures, the value is weighted according to the
probability of being alive. It is also weighted depending if one or
two individuals are alive, and the results presented on the basis of
the number of individuals initially alive. E.g. if two can live as
cheaply as 1.6, then the welfare for each of both members of a couple
with aggregate consumption of 50000 is equivalent to an individual with
consumption of 50000 / 1.6, and if these consumption levels were
experienced when both and one member was alive, the reported CE for
the couple would be 50000.

For a given RRA coefficient the CE should be the primary method of
evaluating the goodness of a particular strategy.

CE's computed with different RRA coefficients are not comparable.

Certainty equivalent consumption standard error
-----------------------------------------------

ce_stderr: number

An estimate of the standard error of measurement of the CE. Standard
error is ill-defined for weighted correlated samples. As a result, in
computing the standard error we err on the high side.

10th percentile consumption
---------------------------

consume10: number

The 10th percentile of consumption in retirement.

90th percentile consumption
---------------------------

consume90: number

The 90th percentile of consumption in retirement.

Mean consumption
----------------

consume_mean: number

The mean consumption in retirement.

Consumption standard deviation
------------------------------

consume_stdev: number

The standard deviation of consumption in retirement. This is not the
standard deviation that might be realized over a single future, but
the standard deviation of consumption over all possible futures.

Pre-retirement consumption
--------------------------

consume_preretirement: number

The consume_preretirement input.

Consumption probability
-----------------------

consume_preretirement_ppf: number

The probability (expressed as a decimal fraction) of retirement
consumption being consume_preretirement or less.

Consumption histogram
---------------------

consume_pdf: {"consume": [<number>, ... ], "weight": [<number>, ... ]}

Retirement consumption probability density function. "consume" is a
list of consumption values, and "weight" is a list of probability
densities for those consumption values. The sum of all weights
multiplied by the width of the consumption intervals would be 1,
except consume is clipped at the 98th percentile, so the sum of the
reported weights will be slightly less than 1. The results represent
the aggregation of multiple possible futures.

Estate histogram
----------------

estate_pdf: {"estate": [<number>, ... ], "weight": [<number>, ... ]}

Residual estate probability density function. "estate" is a list of
before tax estate values, and "weight" is a list of the corresponding
residual estate probability densities. The sum of all weights
multiplied by the estate interval widths will normally be slightly
less than 1.

Consumption confidence regions
------------------------------

consume_cr: [
    {
        "confidence_level": <number>,
        "age": [<number>, ... ],
        "low": [<number>, ... ],
        "high": [<number>, ... ]
    }, ...
]

Consumption confidence regions. "confidence_level" is a probability,
and "age", "low", and "high" define ages, and low and high consumption
values for those ages such that the chance that consumption over
multiple possible lifetimes occurs within the region is the specified
confidence level.

Sample paths
------------

sample_paths: [{
    "age": [<number>, ... ],
    "alive_count": [<number>, ... ],
    "asset_allocation": [[<number>, ... ], ... ],
    "consume": [<number>, ... ],
    "nominal_spias_purchase": [<number> or null, ... ],
    "real_spias_purchase": [<number> or null, ... ],
    "total_guaranteed_income": [<number>, ... ],
    "portfolio_wealth_pretax": [<number>, ... ]
}]

Sample paths provides a JSON array of sample path objects that
describe sample paths that might be experienced by following the
strategy. Each sample path object contains a set of keys each with an
array of consecutive values describing the path. The keys are:

    age

    Age of self in years.

    alive_count

    The number of individuals presently alive.

    This is a dummy value, intended to make plotted sample paths show
    realistic ages of death. AIPlanner itself computes the full sample
    path through age 120 with increasing probabilities of death. For
    this reason all sample path arrays continue even when alive_count
    is zero.

    asset_allocation

    The current asset allocation in the same format as the
    asset_allocation result value.

    consume

    The annual consumption rate.

    nominal_spias_purchase

    The amount of any nominal SPIAs purchase.

    real_spias_purchase

    The amount of any real SPIAs purchase. Currently always null.

    total_guaranteed_income

    The current sum of guaranteed income amounts less expenses.

    portfolio_wealth_pretax

    The present value of the taxable, tax deferred, and tax free
    portfolios.

Alive
-----

alive: {
    "age":  [<number>, ... ],
    "couple":  [<number>, ... ],
    "single":  [<number>, ... ]
}

Alive provides mortality data. "age" is an increasing list of ages of
self. "couple" lists the probability of two individuals being alive
for each correspond age. "single" lists the probability of a single
individual being alive for each corresponding age.
