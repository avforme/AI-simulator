# AIPlanner - Deep Learning Financial Planner
# Copyright (C) 2018 Gordon Irlam
#
# All rights reserved. This program may not be used, copied, modified,
# or redistributed without permission.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.

master_consume_floor = 1e4 # Train for scenarios with this consumption and larger.

train_consume_clip = 5e3 # Prevent learning very negative rewards.
eval_consume_clip = 0

master_sex = 'female'
master_life_table_date = '2020-01-01'

master_tax = True

master_life_table_spia = 'iam2012-basic'
master_static_bonds = True
master_real_spias_mwr = 0.94 # Based on 2015 pricing with California annuity guarantee association tax.
master_nominal_spias_mwr = 1.0 # Based on 2015 pricing exceeding 100%.
master_spias_permitted_to_age = 1000

master_returns_standard_error = False
master_stocks = True
master_stocks_return = 0.065
master_stocks_volatility = 0.174
master_stocks_mean_reversion_rate = 0
master_real_bonds = False
master_nominal_bonds = False
master_iid_bonds = True
master_iid_bonds_return = 0.024
master_iid_bonds_volatility = 0.112
master_bills = False

train_age_start = 30 # We will encounter all subsequent ages as we step.
train_age_start2_low = 30
train_age_start2_high = 50
eval_age_start = 40
eval_age_start2 = 40

train_life_expectancy_additional_low = -5
train_life_expectancy_additional_high = 5
train_life_expectancy_additional2_low = -5
train_life_expectancy_additional2_high = 5

eval_life_expectancy_additional = 3
eval_life_expectancy_additional2 = 3

master_couple_death_concordant = True
master_consume_additional = 1

train_age_retirement_low = 50
train_age_retirement_high = 75

eval_age_retirement = 65

master_income_preretirement = 0
master_income_preretirement2 = 0
master_consume_preretirement = 0

# Make tax_free rather than taxable the common case as a means of estimating performance gap from optimal for taxable scenario.
# (The optimal performance for the tax_free scenario can be computed via stochastic dynamic programming.)
train_defined_benefits = '''[
    {"owner": "self",   "age": null, "probability": 1.0, "payout": [5e3, 1e5], "source_of_funds": "tax_free"},
    {"owner": "self",   "age": null, "probability": 0.2, "payout": [5e3, 1e5], "source_of_funds": "tax_deferred"},
    {"owner": "self",   "age": null, "probability": 0.2, "payout": [5e3, 1e5], "source_of_funds": "taxable"},
    {"owner": "spouse", "age": null, "probability": 1.0, "payout": [5e3, 1e5], "source_of_funds": "tax_free"},
    {"owner": "spouse", "age": null, "probability": 0.2, "payout": [5e3, 1e5], "source_of_funds": "tax_deferred"},
    {"owner": "spouse", "age": null, "probability": 0.2, "payout": [5e3, 1e5], "source_of_funds": "taxable"}
]'''

eval_defined_benefits = '''[
    {"owner": "self",   "age": null, "probability": 1.0, "payout": 16e3, "source_of_funds": "tax_free"},
    {"owner": "spouse", "age": null, "probability": 1.0, "payout": 16e3, "source_of_funds": "tax_free"}
]'''

train_p_tax_free_low = 1e3
train_p_tax_free_high = 2e6
train_p_tax_deferred_low = 1e3
train_p_tax_deferred_high = 2e6
train_p_taxable_stocks_low = 1e3
train_p_taxable_stocks_high = 2e6
train_p_taxable_iid_bonds_low = 1e3
train_p_taxable_iid_bonds_high = 2e6
train_p_taxable_stocks_basis_fraction_low = 0
train_p_taxable_stocks_basis_fraction_high = 2

eval_p_tax_free = 200000
eval_p_tax_deferred = 0
eval_p_taxable_stocks = 0
eval_p_taxable_iid_bonds = 0
eval_p_taxable_stocks_basis_fraction = 1

master_p_taxable_real_bonds = 0
master_p_taxable_nominal_bonds = 0
master_p_taxable_bills = 0

master_gamma = 3.0

# Normally the following parameters will matter, but should only possibly matter as observation noise for mean reversion less stocks and iid_bonds model.
eval_stocks_price = 1
eval_real_short_rate_type = 'value'
eval_real_short_rate_value = 0.011
eval_inflation_short_rate_type = 'value'
eval_inflation_short_rate_value = 0.016

train_num_timesteps = 2000000
eval_num_timesteps = 2000000

num_cpu = 1 # Makes Tensorflow deterministic, reduces aggregate cpu usage, and doesn't increase the elapsed time very much.
