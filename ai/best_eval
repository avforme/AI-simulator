#!/usr/bin/env python3

# AIPlanner - Deep Learning Financial Planner
# Copyright (C) 2018 Gordon Irlam
#
# All rights reserved. This program may not be used, copied, modified,
# or redistributed without permission.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.

from argparse import ArgumentParser
from math import sqrt
from os.path import isdir
from re import search
from statistics import mean, StatisticsError, stdev

parser = ArgumentParser()
parser.add_argument('directory', nargs='+')
args = parser.parse_args()

evals = []
ces = []
for path in args.directory:

    if isdir(path):
        fname = path + '/eval.log'
    else:
        fname = path
    with open(fname) as f:

        s = f.read()
        m = search(r'(Initial properties for first episode:(.*\n)+)?Evaluation certainty equivalent: (\d+\.\d+) \+/- (\d+\.\d+).*', s)
        properties = m.group(0)
        ce = float(m.group(3))
        ce_se = float(m.group(4))
        evals.append((ce, ce_se, path, properties))
        ces.append(ce)

evals.sort()

try:
    sd = stdev(ces)
    se = sd / sqrt(len(ces) - 1)
except StatisticsError:
    sd = float('nan')
    se = float('nan')

print('Certainty equivalent distribution: {:f} +/- {:f} (standard error {:f})'.format(mean(ces), sd, se))

print('Best certainty equivalent: {:f} (standard error {:f})'.format(evals[-1][0], evals[-1][1]))

print('Best result:', evals[-1][2])
print(evals[-1][3])
