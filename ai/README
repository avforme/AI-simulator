AIPlanner - Deep Reinforcement Learning Financial Planner.

Server requirements
-------------------

AIPLanner runs well in production on an 8 core 16 thread Amazon
c5.4xlarge instance. Such an instance is also necessary for training
the generic nueral networks.

For development a much smaller c5.large, or even a t3.micro instance,
can often be used, provided the SEEDS=1 environment variable is set
and the --num-models=1 flag is passed to serve_model.py .

Tensorflow
----------

Tensorflow is the deep learning framework used. Would like to run on
Ubuntu 18.04, but Ubuntu 18.04 has CUDA 9.1.  Google won't be
releasing tensorflow for CUDA 9.1, will release for 9.2.

Hence for time being using Amazon Deep Learning AMI (Ubuntu) Version
8.0 based on Ubuntu 16.04 - CUDA 9 - ami-dff741a0 with tensorflow
pre-installed.

Obtaining additional required components
----------------------------------------

Installing additional required components on Ubuntu 18.04 (currently
not workable):

    sudo
    apt install catdoc python3-pip python3-dev python3-mpi4py nodejs npm
    pip3 install tensorflow
    pip3 install gym
    exit

Installing additional required components on Amazon Deep Learning AMI
(Ubuntu):

    sudo apt install catdoc
    source activate tensorflow_p36
    pip install mpi4py
    pip install joblib
    pip install gym

    [ Get latest Node.js per https://nodejs.org/en/download/ ]
    cd ~/
    curl https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz | tar xJf -
    export PATH=$HOME/node-v8.11.3-linux-x64/bin:$PATH

npm install -g typescript
npm install -g @angular/cli

Setting up environment variables
--------------------------------

Various environment variables need to be set up for production or
development tasks:

    source activate tensorflow_p36

Training the generic nueral network models
------------------------------------------

Training the neural network models will take 10-20 hours:

    cd ~/aiplanner/ai/web
    ./train

The models should then be installed:

    mkdir -p ~/aiplanner-data/models
    mv aiplanner.*.tf ~/aiplanner-data/models

Generating required assets (images)
-----------------------------------

Generate the images required for the website:

    cd ~/aiplanner/ai/angular/src/assets.generate
    ./run

Build the website files
-----------------------

Angular provides a single webpage app for interacting with the models.

Build the website:

    export PATH=$HOME/node-v8.11.3-linux-x64/bin:$PATH
    cd ~/aiplanner/ai/angular
    ng build --prod

Install the website:

    cd ~/aiplanner/ai/angular
    ./install

Set up the website
------------------

    sudo apt install apache2
    a2enmod ssl proxy proxy_http
    Ubuntu 18.04:
        sudo apt install python3-certbot-apache
    Ubuntu 16.04:
        sudo add-apt-repository ppa:certbot/certbot
        sudo apt update
        sudo apt install python3-certbot-apache
    certbot --apache certonly
    Email: <you@yourdomain>
    If serving for www.<thisdomain>
        Domain: <thisdomain>
    If serving for a particular host:
        Domain: <thishost.thisdomain>

    Select appropriate <site-ssl.conf> file:
        sudo cp aiplanner/ai/web/sites-examples/<sample-site-ssl.conf> /etc/apache2/sites-available/<site-ssl.conf>
    Edit site.conf appropriately:
        sudo <edit> /etc/apache2/sites-available/<site-ssl.conf>
    sudo a2ensite <site-ssl>
    sudo service apache2 reload

    Repeat installing <site.conf> or <site-ssl.conf> for additional
    sites to be served if desired, so that http://www.<site>/,
    http://<site>/, and https://<site>/ all point to
    https://www.<site>/.

Installing an outbound mailer
-----------------------------

A mail transfer agent is required to provide end users with email
notifications that their long running models have been trained.

    sudo apt install postfix
    sudo dpkg-reconfigure postfix
        Config type: Internet Site
        Site: <thisdomain>
        Root mail: <you@yourdomain>
        Accept mail for: <thisdomain>
        Synchronous updates: no
        Local networks: <leave as is>
        Mailbox size limit: 0
        Address extension: +
        Internet protocols: all
    sudo <edit> /etc/postfix/main.cf
        Change: myhostname = <...>
        To: myhostname = aiplanner.com
    sudo /etc/init.d/postfix reload

You may also need to add an SPF record for the site so messages from
it don't end up in the spam folder. Something like:

    Type: TXT
    Host: @
    Value: v=spf1 ip4:18.206.41.110 ~all
    TTL: 3600

You should also add a MX record so the server can receive and forward
bounce messages addressed to root. Something like:

    Type: MX
    Host: @
    Priority: 1
    Value: ec2-18-206-41-110.compute-1.amazonaws.com
    TTL: 3600

Consult your domain provider for details of how to do these steps.

Finally you may need to create a firewall rule to allow inbound SMTP
connections on port 25. Consult your service provider for details.

Performing site health checks
-----------------------------

Uptime robot, or some other serivce should be used to perform periodic
HTTP GET /healthcheck requests to port 3000 of the production server.
After about 10 seconds, the string "OK" should be returned as the body
to indicate the system appears to be operating normally, any other
result indicates a problem.

Development
-----------

The model server has four functions:
    - respond to the Angular server proxying to it to handle HTTP /api requests
    - execute the run queue to perform long running model training and evaluations
    - purge old results from the directory ~/aiplanner-data
    - respond to HTTP /healthcheck requests

The model server can be run in development as follows:

    cd ~/aiplanner/ai/web
    ./server
        --base-url=<http://thishost.thisdomain:4200/> \
        --admin-email=<you@yourdomain> \
        --notify-email=<you@yourdomain> --notify-name="<FirstName> <LastName>"

On the same machine in another shell window run the Angular server:

    export PATH=$HOME/node-v8.11.3-linux-x64/bin:$PATH
    cd ~/aiplanner/ai/angular
    ng serve --host 0.0.0.0 --public-host <thishost.thisdomain>

Connect to the front end using a browser (need to open port 4200 of
development machine firewall unless doing development on localhost):

    http://<thishost.thisdomain>:4200/
