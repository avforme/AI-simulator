#!/bin/bash

# AIPlanner - Deep Learning Financial Planner
# Copyright (C) 2018 Gordon Irlam
#
# All rights reserved. This program may not be used, copied, modified,
# or redistributed without permission.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.

AIPLANNER_HOME=${AIPLANNER_HOME:-$HOME/aiplanner}

source $AIPLANNER_HOME/ai/helpers.bash

mkdir -p results
cd results

PARALLEL=Jobs
ALGORITHM=ppo1
GAMMA=3
for TIMESTEPS in 500000 1000000 2000000 5000000; do
    for UNIT in single couple; do
        for SPIAS in no_spias spias; do

            TRAINARGS="--train-num-timesteps=$TIMESTEPS"
            ARGS="--master-gamma=$GAMMA"
            if [ $UNIT = couple ]; then
                ARGS="$TRAINARGS --sex2=male"
            fi
            if [ $SPIAS = spias ]; then
                ARGS="$TRAINARGS --master-nominal-spias"
            fi

            EPISODE="$ALGORITHM-$UNIT-$SPIAS-gamma$GAMMA-timesteps$TIMESTEPS"

            mkdir -p $EPISODE
            cd $EPISODE

            if [ $ALGORITHM == ppo1 ]; then
                TRAINER="$AI_DIR/train_ppo1.py"
            else
                TRAINER="$AI_DIR/train_spinup.py --train-algorithm=$ALGORITHM"
            fi
            TRAINER="$TRAINER $TRAINARGS $ARGS"
            EVALUATOR="$AI_DIR/eval_model.py $ARGS"

            train_eval $EPISODE

            cd ..

        done
    done
done

echo `date` Done

# PPO1:
#     Specific gamma for variable scenario performs 2-3% worse than specific scenario.
#     Generic gamma for variable scenario perform 2-3% worse than specific gamma for variable scenario.
#
# Notes on PPO1 tweaks that have been tried out (single with no nominal SPIAs):
#
# --train-single-num-timesteps=500000
#    Produced 0.0% better generic results than 1m timesteps both pposgd_simple.learn(optim_batchsize=64).
#    SUGGESTS COULD CUT TRAINING TIME IN HALF BUT MIGHT NOT WORK FOR MORE COMPLEX ENVIRONMENTS SUCH AS SPIAS.
#
# --train-single-num-timesteps=2000000
#    Produced 0.7% worse generic results than 1m timesteps both pposgd_simple.learn(optim_batchsize=64).
#
# --train-hidden-layer-size=128
#    Produced 0.2% worse generic results than hidden layer size 64 both pposgd_simple.learn(optim_batchsize=64).
#
# --train-hidden-layer-size=128 --train-single-num-timesteps=2000000
#    Produced 0.6% worse generic results than 1m timesteps and hidden layer size 64 both pposgd_simple.learn(optim_batchsize=64).
#
# pposgd_simple.learn(lam=0.98)
# pposgd_simple.learn(lam=1)
#    Produced 0.2% better and 0.1% worse generic results than lam=0.95 all pposgd_simple.learn(optim_batchsize=64).
#
# pposgd_simple.learn(optim_batchsize=128)
# pposgd_simple.learn(optim_batchsize=256)
#    Produced 0.3% better and 0.3% generic results than optim_batchsize=64.
#
# pposgd_simple.learn(adam_epsilon=1e-6)
#    Produced 0.1% worse generic results than adam_epsilon=1e-5 default both pposgd_simple.learn(optim_batchsize=64).
#
# pposgd_simple.learn(optim_epochs=20)
#    Produced 0.4% worse generic results than optim_epochs=10 both pposgd_simple.learn(optim_batchsize=64).
#
# pposgd_simple.learn(optim_batchsize=128, optim_stepsize=3e-5)
#    Produduced 0.4% worse generic results than optim_batchsize=128, optim_stepsize=3e-4.
#
# pposgd_simple.learn(optim_batchsize=128, optim_stepsize=1e-4)
#    Produduced 0.2% worse generic results than optim_batchsize=128, optim_stepsize=3e-4.
#
# --train-num-hidden-layers=3
#    Produced 0.4% worse generic results than 2 hidden layers both pposgd_simple.learn(optim_batchsize=128)
