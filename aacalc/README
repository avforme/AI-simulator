Web based frontend for the AACalc asset allocation and consumption
planning calculator.

Source files reside in aacalc, while running instance files reside in
aacalc.data .

Obtaining additional required components
----------------------------------------

sudo apt update
sudo apt install apache2 apache2-utils libapache2-mod-wsgi-py3 python3-django r-base python3-scipy catdoc

Set up hostname
---------------

# This step is optional. It helps when using EC2 to give various
# instances meaningful names.

# Set up hostname and domain name if not already set:

sudo bash
echo  <unqualified-hostname> > /etc/hostname
hostname -F /etc/hostname
[edit] /etc/hosts
modify: 127.0.0.1 localhost <unqualified-hostname> <qualified-hostname>
echo 'supersede domain-name "<domain-name>";' >> /etc/dhcp/dhclient.conf
# Not sure how to get dhclient.conf re-read and resolv.conf re-written.  Not to worry, it will get picked up when we reboot.
reboot

Create directories
------------------

mkdir -p aacalc.data/{static/results,static/sample,run}
sudo chown www-data:www-data aacalc.data/{static/results,run}

Obtain the required data files
------------------------------

# Obtain the HECM revere mortgage principal limit factors:
cd aiplanner/opal
curl https://www.gordoni.com/aacalc-data.tar.gz | tar -zxf -
cd ../..

Update the interest rate data
-----------------------------

aiplanner/aacalc/cron.daily

Set up Django
-------------

# Create site files.
mkdir aacalc.data/project
touch aacalc.data/project/__init__.py
cp aiplanner/aacalc/example-sitesettings.py aacalc.data/project/sitesettings.py

[edit] aacalc.data/project/sitesettings.py
# Optionally set DEBUG to True to display backtraces in the web browser (displays sensistive data).
# Set ROOT to the path to the top level aiplanner directory (no trailing slash).
# Set ADMINS to receive email messages.
# Set ALLOWED_HOSTS to a list containing the web server hostname (or a suffix thereof).
#     Can set to [ '*' ] but the Django docs suggest this may have security implications when DEBUG is False.
# Make SECRETKEY unique.

# Collect statically served files.
aiplanner/aacalc/manage.py collectstatic --noinput

Set up Apache
-------------

sudo bash
a2dissite 000-default
# Select appropriate site.conf.
# dev.aacalc.com is a sample development Apache conf file.
cp aiplanner/aacalc/sites-available/<sample-site.conf-file> /etc/apache2/sites-available/<site.conf>
# Edit site.conf appropriately.
<edit> /etc/apache2/sites-available/<site.conf>
a2ensite <site>

# For TLS, also need:
a2enmod ssl
apt install python3-certbot-apache
certbot --apache certonly
Email: <email>
Domain: aacalc.com
Activate: <blank to select aacalc.com and www.aacalc.com>
<make a backup of /etc/letsencrypt to somewhere safe>

systemctl restart apache2

exit

# Create password file if required to limit access to host:
htpasswd -c ~/aacalc.data/aacalc.htpasswd <user>
[password: <passwd>]

Set up cron
-----------

cat aiplanner/aacalc/crontab.example
sudo crontab -e
[edit to add crontab.example]

Set up mailer
-------------

# Needed to email crash reports.
# If you set DEBUG to False in aacalc.data/project/sitesettings.py you will need to install a mailer so you can debug any problems.

# Use either postfix (Ubuntu default mailer):

sudo apt install postfix
# Type: internet site
# Domain: <domain>
sudo dpkg-reconfigure postfix
# Type: internet site
# Domain: <domain>
# Postmaster: <user@otherdomain>
# Other destinations: <blank>
# Syncronous updates: no
# Local networks: unchanged
# Size limit: 0
# Local address extension: +
# Internet protocols: all

# Or exim:

apt-get install exim4
sudo dpkg-reconfigure exim4-config
#  internet site
#  <domain>
#  127.0.0.1 ; ::1
#  <domain>
#  ...
#  <your-email-address>

Test it out
-----------

In a web browser visit http://<site>/ .
